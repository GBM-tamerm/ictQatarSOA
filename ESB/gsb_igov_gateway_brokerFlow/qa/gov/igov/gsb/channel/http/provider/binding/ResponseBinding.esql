BROKER SCHEMA qa.gov.igov.gsb.channel.http.provider.binding

CREATE COMPUTE MODULE ResponseBinding_ApplyBinding
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		DECLARE rEnvelope REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope ;
		IF OutputRoot.XMLNSC.soapenv:Envelope IS NOT NULL THEN
			DECLARE rEnvelope REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope ;
			IF rEnvelope.soapenv:Header IS NOT NULL THEN
				DECLARE rHeader REFERENCE TO rEnvelope.soapenv:Header ;	
					
				IF rHeader.igov:IGOVHeader IS NOT NULL THEN
					DECLARE rIGOVHeader REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.igov:IGOVHeader;
					SET rIGOVHeader.igov:TrackingID = Environment.igov.trackingID ;
					SET rIGOVHeader.igov:SenderInfo = Environment.igov.senderInfo ;		
				ELSE
					SET rHeader.igov:IGOVHeader.igov:TrackingID = Environment.igov.trackingID ;
					SET rHeader.igov:IGOVHeader.igov:SenderInfo = Environment.igov.senderInfo ;		
				END IF;
				
			ELSE
				SET rEnvelope.soapenv:Header.igov:IGOVHeader.igov:TrackingID = Environment.igov.trackingID ;
				SET rEnvelope.soapenv:Header.igov:IGOVHeader.igov:SenderInfo = Environment.igov.senderInfo ;		
			END IF;
		END IF;	
		
		DECLARE iBSoptions INTEGER BITOR(FolderBitStream, ValidateNone);		
		DECLARE InMsgBlob BLOB;
		DECLARE InMESSAGE CHARACTER;
		SET InMsgBlob = ASBITSTREAM(InputRoot.XMLNSC.soapenv:Envelope CCSID InputRoot.Properties.CodedCharSetId OPTIONS iBSoptions TYPE '{http://schemas.xmlsoap.org/soap/envelope/}:Envelope' FORMAT 'XML1' );
		SET InMESSAGE = CAST(InMsgBlob AS CHARACTER CCSID 1208);
		IF InMESSAGE IS NULL THEN
			SET InMESSAGE = 'NULL' ;	
		END IF;
		SET Environment.Variables.Log4j.LogText = Environment.Variables.Log4j.LogPrefix || 'OutboundResponse: ' || InMESSAGE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
